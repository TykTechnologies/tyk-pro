AWSTemplateFormatVersion: 2010-09-09
Resources:
  CloudMap:
    Properties:
      Description: Service Map for Docker Compose project oss-ecs-dependencies
      Name: oss-ecs-dependencies.local
      Vpc: vpc-040a609d325d230d7
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
  Cluster:
    Properties:
      ClusterName: oss-ecs-dependencies
      Tags:
        - Key: com.docker.compose.project
          Value: oss-ecs-dependencies
    Type: AWS::ECS::Cluster
  Default6379Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: redis:6379/tcp on default network
      FromPort: 6379
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: TCP
      ToPort: 6379
    Type: AWS::EC2::SecurityGroupIngress
  Default27017Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: mongo:27017/tcp on default network
      FromPort: 27017
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: TCP
      ToPort: 27017
    Type: AWS::EC2::SecurityGroupIngress
  DefaultNetwork:
    Properties:
      GroupDescription: oss-ecs-dependencies Security Group for default network
      Tags:
        - Key: com.docker.compose.project
          Value: oss-ecs-dependencies
        - Key: com.docker.compose.network
          Value: tyk-network
      VpcId: vpc-040a609d325d230d7
    Type: AWS::EC2::SecurityGroup
  DefaultNetworkIngress:
    Properties:
      Description: Allow communication within network default
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: DefaultNetwork
    Type: AWS::EC2::SecurityGroupIngress
  LogGroup:
    Properties:
      LogGroupName: /docker-compose/oss-ecs-dependencies
    Type: AWS::Logs::LogGroup
  MongoService:
    Properties:
      Cluster:
        Fn::GetAtt:
          - Cluster
          - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Ref: DefaultNetwork
          Subnets:
            - subnet-04d34f3e5863af20a
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - MongoServiceDiscoveryEntry
              - Arn
      Tags:
        - Key: com.docker.compose.project
          Value: oss-ecs-dependencies
        - Key: com.docker.compose.service
          Value: mongo
      TaskDefinition:
        Ref: MongoTaskDefinition
    Type: AWS::ECS::Service
  MongoServiceDiscoveryEntry:
    Properties:
      Description: '"mongo" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: mongo
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  MongoTaskDefinition:
    Properties:
      ContainerDefinitions:
        - Command:
            - eu-central-1.compute.internal
            - oss-ecs-dependencies.local
          Essential: false
          Image: docker/ecs-searchdomain-sidecar:1.0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: oss-ecs-dependencies
          Name: Mongo_ResolvConf_InitContainer
        - DependsOn:
            - Condition: SUCCESS
              ContainerName: Mongo_ResolvConf_InitContainer
          Environment:
            - Name: MONGO_INITDB_ROOT_PASSWORD
              Value: "123456789"
            - Name: MONGO_INITDB_ROOT_USERNAME
              Value: root
          Essential: true
          HealthCheck:
            Command:
              - CMD-SHELL
              - echo 'db.runCommand("ping").ok' | mongo mongo:27017/test --quiet
            Interval: 10
            Retries: 5
            StartPeriod: 10
            Timeout: 10
          Image: docker.io/library/mongo:4.4@sha256:be5e699466278a9d19884bfe1d6a93bd056ac2cff694b51b87c692f3b1716b5e
          LinuxParameters: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: oss-ecs-dependencies
          Name: mongo
          PortMappings:
            - ContainerPort: 27017
              HostPort: 27017
              Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Ref: MongoTaskExecutionRole
      Family: oss-ecs-dependencies-mongo
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
    Type: AWS::ECS::TaskDefinition
  MongoTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Condition: {}
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
        - Key: com.docker.compose.project
          Value: oss-ecs-dependencies
        - Key: com.docker.compose.service
          Value: mongo
    Type: AWS::IAM::Role
  RedisService:
    Properties:
      Cluster:
        Fn::GetAtt:
          - Cluster
          - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Ref: DefaultNetwork
          Subnets:
            - subnet-04d34f3e5863af20a
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - RedisServiceDiscoveryEntry
              - Arn
      Tags:
        - Key: com.docker.compose.project
          Value: oss-ecs-dependencies
        - Key: com.docker.compose.service
          Value: redis
      TaskDefinition:
        Ref: RedisTaskDefinition
    Type: AWS::ECS::Service
  RedisServiceDiscoveryEntry:
    Properties:
      Description: '"redis" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: redis
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  RedisTaskDefinition:
    Properties:
      ContainerDefinitions:
        - Command:
            - eu-central-1.compute.internal
            - oss-ecs-dependencies.local
          Essential: false
          Image: docker/ecs-searchdomain-sidecar:1.0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: oss-ecs-dependencies
          Name: Redis_ResolvConf_InitContainer
        - DependsOn:
            - Condition: SUCCESS
              ContainerName: Redis_ResolvConf_InitContainer
          Essential: true
          HealthCheck:
            Command:
              - CMD
              - redis-cli
              - --raw
              - incr
              - ping
            Interval: 5
            Retries: 10
            StartPeriod: 2
            Timeout: 10
          Image: docker.io/library/redis:6.0@sha256:941c674059fb663c8b4c619634be20a2bf7859de034ddc97f282ccac07082b15
          LinuxParameters: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: oss-ecs-dependencies
          Name: redis
          PortMappings:
            - ContainerPort: 6379
              HostPort: 6379
              Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Ref: RedisTaskExecutionRole
      Family: oss-ecs-dependencies-redis
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
    Type: AWS::ECS::TaskDefinition
  RedisTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Condition: {}
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
        - Key: com.docker.compose.project
          Value: oss-ecs-dependencies
        - Key: com.docker.compose.service
          Value: redis
    Type: AWS::IAM::Role
