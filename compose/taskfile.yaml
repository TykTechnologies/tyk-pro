version: '3'

dotenv: ['.env']

vars:
  dep_folder: dependencies
  comp_folder: tyk-components
  scripts_folder: scripts

tasks:
  login:
    sumary: |
      Logins into AWS ECR registry to allow pull required images from it
    cmds:
      - aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 754489498669.dkr.ecr.eu-central-1.amazonaws.com

  bootstrap:
    sumary: |
      Bootstraps dashboard with an organization and user
    dir: '{{.scripts_folder}}'
    cmds:
      - sleep 8
      - ./dash-bootstrap.sh http://localhost:3000
      - sleep 8

  local:
    sumary: |
      Deploys infrastructure locally using docker compose manifest
    deps: [init]
    cmds:
      - echo "This is the ${COMPOSE_PROJECT_NAME} project "
      - docker compose  -f {{ .dep_folder }}/docker-compose.yml -f {{ .dep_folder }}/docker-compose.volumes.yml -p ${COMPOSE_PROJECT_NAME} --profile master-datacenter up -d
      - docker compose -f {{ .comp_folder }}/docker-compose.yml -f {{ .comp_folder }}/docker-compose.volumes.yml -p ${COMPOSE_PROJECT_NAME} --profile master-datacenter up -d
      - docker ps

  local-ha:
    sumary: |
      Deploys ha infrastructure locally using docker compose manifest
    deps: [init]
    cmds:
      - echo "This is the ${COMPOSE_PROJECT_NAME} project "
      - docker compose -f {{ .dep_folder }}/docker-compose.yml -f {{ .dep_folder }}/docker-compose-ha.yml -f {{ .dep_folder }}/docker-compose.volumes.yml -f {{ .dep_folder }}/docker-compose.volumes-ha.yml -p ${COMPOSE_PROJECT_NAME} --profile master-datacenter up -d 
      - docker compose -f {{ .comp_folder }}/docker-compose.yml -f {{ .comp_folder }}/docker-compose-ha.yml -f {{ .comp_folder }}/docker-compose.volumes.yml -f {{ .comp_folder }}/docker-compose.volumes-ha.yml -p ${COMPOSE_PROJECT_NAME} --profile master-datacenter up -d
      - task: bootstrap
      - docker compose -f {{ .dep_folder }}/docker-compose.yml -f {{ .dep_folder }}/docker-compose-ha.yml -f {{ .dep_folder }}/docker-compose.volumes.yml -f {{ .dep_folder }}/docker-compose.volumes-ha.yml -p ${COMPOSE_PROJECT_NAME} --profile slave-datacenter up -d 
      - docker compose -f {{ .comp_folder }}/docker-compose.yml -f {{ .comp_folder }}/docker-compose-ha.yml -f {{ .comp_folder }}/docker-compose.volumes.yml -f {{ .comp_folder }}/docker-compose.volumes-ha.yml -p ${COMPOSE_PROJECT_NAME} --profile slave-datacenter up -d
      - docker ps


  clean-local:
    sumary: |
      Tears down all local infrastructure including networking
    cmds:
      - docker compose -f {{ .dep_folder }}/docker-compose.yml -f {{ .dep_folder }}/docker-compose.volumes.yml -p ${COMPOSE_PROJECT_NAME} --profile all down
      - docker compose -f {{ .comp_folder }}/docker-compose.yml -f {{ .comp_folder }}/docker-compose.volumes.yml -p ${COMPOSE_PROJECT_NAME} --profile all down
      - docker network rm tyk-network || true
      - docker ps

  clean-local-ha:
    sumary: |
      Tears down all local infrastructure including networking
    cmds:
      - docker compose -f {{ .dep_folder }}/docker-compose.yml -f {{ .dep_folder }}/docker-compose-ha.yml -f {{ .dep_folder }}/docker-compose.volumes.yml -f {{ .dep_folder }}/docker-compose.volumes-ha.yml -p ${COMPOSE_PROJECT_NAME} --profile all down
      - docker compose -f {{ .comp_folder }}/docker-compose.yml -f {{ .comp_folder }}/docker-compose-ha.yml -f {{ .comp_folder }}/docker-compose.volumes.yml -f {{ .comp_folder }}/docker-compose.volumes-ha.yml -p ${COMPOSE_PROJECT_NAME} --profile all down
      - docker network rm tyk-network || true
      - docker ps

  login-remote:
    sumary: |
      All steps required to login into ECS.
      It won't work from here, please run them directly into your
    cmds:
      - acp devacc
      - docker context create ecs myecs
      - docker context use myecs
      - unset AWS_PROFILE
      - export AWS_REGION=eu-central-1

  remote:
    env:
      DOCKER_CONTEXT: myecs
    sumary: |
      Deploys infrastructure remotelly on a dedicated ecs cluster using docker compose manifests
    deps: [remote-dep,remote-comp]

  remote-dep:
    sumary: |
      Deploys dependencies components infrastructure remotelly on a dedicated ecs cluster using docker compose manifests
    dir: '{{.dep_folder}}'
    vars:
      COMPONENT: dependencies
    env:
      DOCKER_CONTEXT: myecs
    cmds:
      - docker compose -p ${COMPOSE_PROJECT_NAME}-"{{.COMPONENT}}" up -d

  remote-comp:
    sumary: |
      Deploys tyk components infrastructure remotelly on a dedicated ecs cluster using docker compose manifests
    dir: '{{.comp_folder}}'
    vars:
      COMPONENT: tyk
    env:
      DOCKER_CONTEXT: myecs
    cmds:
      - docker compose -p ${COMPOSE_PROJECT_NAME}-"{{.COMPONENT}}" up -d

  remote-status:
    sumary: |
      Describes remote deployment status
    cmds:
      - aws cloudformation describe-stacks --stack-name ${COMPOSE_PROJECT_NAME}-dependencies | jq .Stacks[].StackStatus
      - aws cloudformation describe-stacks --stack-name ${COMPOSE_PROJECT_NAME}-tyk | jq .Stacks[].StackStatus
      # - |
      # while [ "${A}" != "CREATE_COMPLETE" -o "${B}" != "CREATE_COMPLETE" ]
      # do
      #   A=$(aws cloudformation describe-stacks --stack-name ${COMPOSE_PROJECT_NAME}-dependencies | jq .Stacks[].StackStatus)
      #   B=$(aws cloudformation describe-stacks --stack-name ${COMPOSE_PROJECT_NAME}-tyk | jq .Stacks[].StackStatus)
      # done

  clean-remote:
    sumary: |
      Tears down all remote infrastructure
    env:
      DOCKER_CONTEXT: myecs
    deps: [clean-remote-dep,clean-remote-comp]

  clean-remote-dep:
    sumary: |
      Deploys tyk components infrastructure remotelly on a dedicated ecs cluster using docker compose manifests
    dir: '{{.dep_folder}}'
    env:
      DOCKER_CONTEXT: myecs
    vars:
      COMPONENT: dependencies
    cmds:
      - docker compose -p ${COMPOSE_PROJECT_NAME}-"{{.COMPONENT}}" down

  clean-remote-comp:
    sumary: |
      Deploys external components infrastructure remotelly on a dedicated ecs cluster using docker compose manifests
    dir: '{{.comp_folder}}'
    env:
      DOCKER_CONTEXT: myecs
    vars:
      COMPONENT: tyk
    cmds:
      - docker compose -p ${COMPOSE_PROJECT_NAME}-"{{.COMPONENT}}" down

  init:
    sumary: |
      Creates networking infra for local deployment
    cmds:
      - docker network create tyk-network || true

  convert-remote:
    sumary: |
      Outputs the cloudformation template that will be use to deploy docker compose manifest remotelly on the ecs cluster.
      For more info read: https://docs.docker.com/cloud/ecs-integration/
    env:
      DOCKER_CONTEXT: myecs
    deps: [convert-remote-dep,convert-remote-comp]

  convert-remote-comp:
    sumary: |
      Outputs the cloudformation template that will be use to deploy docker compose manifest remotelly on the ecs cluster.
      For more info read: https://docs.docker.com/cloud/ecs-integration/
    dir: '{{.comp_folder}}'
    env:
      DOCKER_CONTEXT: myecs
    vars:
      COMPONENT: tyk
    cmds:
      - docker compose -p ${COMPOSE_PROJECT_NAME}-"{{.COMPONENT}}" convert > docker-ecs-cft-"{{.COMPONENT}}".yml

  convert-remote-dep:
    sumary: |
      Outputs the cloudformation template that will be use to deploy docker compose manifest remotelly on the ecs cluster.
      For more info read: https://docs.docker.com/cloud/ecs-integration/
    dir: '{{.dep_folder}}'
    env:
      DOCKER_CONTEXT: myecs
    vars:
      COMPONENT: dependencies
    cmds:
      - docker compose -p ${COMPOSE_PROJECT_NAME}-"{{.COMPONENT}}" convert > docker-ecs-cft-"{{.COMPONENT}}".yml

  test:
    cmds:
      - echo "---Gateway Status---"
      - curl -s --fail -k https://"{{.HOST}}":8080/hello
    vars:
      HOST: localhost

  test-remote:
    cmds:
      - echo "---Gateway Status---"
      - curl -s --fail http://"{{.HOST}}":8080/hello
    vars:
      HOST: "${COMPOSE_PROJECT_NAME}.${TYK_DEV_DOMAIN}"

  pytest:
    sumary: |
      Deploys pytest container that runs against local infrastructure using docker compose manifest
    deps: [init]
    cmds:
      - echo "This is the ${COMPOSE_PROJECT_NAME} project "
      - docker compose -f {{ .comp_folder }}/docker-compose.yml -f {{ .comp_folder }}/docker-compose.volumes.yml -p ${COMPOSE_PROJECT_NAME} --profile test up -d
      - docker ps

  push-images:
    sumary: |
      Downloads stable images from tyk.io and pushes to ecr repo
    cmds:
      - docker pull tykio/tyk-dashboard:v4.3.3
      - docker pull tykio/tyk-pump-docker-pub:v1.7.0
      - docker pull tykio/tyk-mdcb-docker:v2.1.1
      - docker pull tykio/tyk-gateway:v4.3.4
      - docker tag tykio/tyk-dashboard:v4.3.3 754489498669.dkr.ecr.eu-central-1.amazonaws.com/tyk-analytics:v4.3.3
      - docker tag tykio/tyk-pump-docker-pub:v1.7.0 754489498669.dkr.ecr.eu-central-1.amazonaws.com/tyk-pump:v1.7.0
      - docker tag tykio/tyk-mdcb-docker:v2.1.1 754489498669.dkr.ecr.eu-central-1.amazonaws.com/tyk-sink:v2.1.1
      - docker tag tykio/tyk-gateway:v4.3.4 754489498669.dkr.ecr.eu-central-1.amazonaws.com/tyk:v4.3.4
      - task: login
      - docker push 754489498669.dkr.ecr.eu-central-1.amazonaws.com/tyk-analytics:v4.3.3
      - docker push 754489498669.dkr.ecr.eu-central-1.amazonaws.com/tyk-pump:v1.7.0
      - docker push 754489498669.dkr.ecr.eu-central-1.amazonaws.com/tyk-sink:v2.1.1
      - docker push 754489498669.dkr.ecr.eu-central-1.amazonaws.com/tyk:v4.3.4
    